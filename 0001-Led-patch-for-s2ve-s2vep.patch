From c83358053edd8592966c8a716e4fd036c13ac829 Mon Sep 17 00:00:00 2001
From: LuK1337 <priv.luk@gmail.com>
Date: Thu, 23 Oct 2014 21:28:05 +0200
Subject: [PATCH] Led patch for s2ve/s2vep

Change-Id: I169cb4ca6e2ee25a065be422b03c5b4d4b22b091
---
 .../com/android/server/input/InputManagerService.java  |  5 +++++
 .../com/android/server/power/PowerManagerService.java  | 18 ++++++++++++------
 2 files changed, 17 insertions(+), 6 deletions(-)

diff --git a/services/java/com/android/server/input/InputManagerService.java b/services/java/com/android/server/input/InputManagerService.java
index b8a78cd..f581091 100644
--- a/services/java/com/android/server/input/InputManagerService.java
+++ b/services/java/com/android/server/input/InputManagerService.java
@@ -90,6 +90,8 @@ import java.util.HashSet;
 import libcore.io.Streams;
 import libcore.util.Objects;
 
+import com.android.server.power.PowerManagerService;
+
 /*
  * Wraps the C++ InputManager and provides its callbacks.
  */
@@ -1401,6 +1403,9 @@ public class InputManagerService extends IInputManager.Stub
 
     // Native callback.
     private int interceptKeyBeforeQueueing(KeyEvent event, int policyFlags, boolean isScreenOn) {
+	if ((event.getScanCode() == 139 || event.getScanCode() == 158) && event.getAction() == 0) {
+		PowerManagerService.ButtonsLightON();
+	}
         return mWindowManagerCallbacks.interceptKeyBeforeQueueing(
                 event, policyFlags, isScreenOn);
     }
diff --git a/services/java/com/android/server/power/PowerManagerService.java b/services/java/com/android/server/power/PowerManagerService.java
index a134341..b930110 100644
--- a/services/java/com/android/server/power/PowerManagerService.java
+++ b/services/java/com/android/server/power/PowerManagerService.java
@@ -81,6 +81,8 @@ import libcore.util.Objects;
 public final class PowerManagerService extends IPowerManager.Stub
         implements Watchdog.Monitor {
     private static final String TAG = "PowerManagerService";
+    private static long buttonNextTimeout = -1;
+    private static int buttonBrightness = 0;
 
     private static final boolean DEBUG = false;
     private static final boolean DEBUG_SPEW = DEBUG && true;
@@ -196,13 +198,13 @@ public final class PowerManagerService extends IPowerManager.Stub
     private DreamManagerService mDreamManager;
     private AutoBrightnessHandler mAutoBrightnessHandler;
     private LightsService.Light mAttentionLight;
-    private LightsService.Light mButtonsLight;
+    private static LightsService.Light mButtonsLight;
     private LightsService.Light mKeyboardLight;
     private LightsService.Light mCapsLight;
     private LightsService.Light mFnLight;
 
-    private int mButtonTimeout;
-    private int mButtonBrightness;
+    private static int mButtonTimeout;
+    private static int mButtonBrightness;
     private int mButtonBrightnessSettingDefault;
     private int mKeyboardBrightness;
     private int mKeyboardBrightnessSettingDefault;
@@ -1707,7 +1709,7 @@ public final class PowerManagerService extends IPowerManager.Stub
                     nextTimeout = mLastUserActivityTime
                             + screenOffTimeout - screenDimDuration;
                     if (now < nextTimeout) {
-                        int buttonBrightness, keyboardBrightness;
+                        int keyboardBrightness;
                         if (mButtonBrightnessOverrideFromWindowManager >= 0) {
                             buttonBrightness = mButtonBrightnessOverrideFromWindowManager;
                             keyboardBrightness = mButtonBrightnessOverrideFromWindowManager;
@@ -1720,7 +1722,7 @@ public final class PowerManagerService extends IPowerManager.Stub
                         if (mButtonTimeout != 0 && now > mLastUserActivityTime + mButtonTimeout) {
                             mButtonsLight.setBrightness(0);
                         } else {
-                            mButtonsLight.setBrightness(buttonBrightness);
+			    if (now > buttonNextTimeout) mButtonsLight.setBrightness(0);
                             if (buttonBrightness != 0 && mButtonTimeout != 0) {
                                 nextTimeout = now + mButtonTimeout;
                             }
@@ -1763,7 +1765,11 @@ public final class PowerManagerService extends IPowerManager.Stub
             }
         }
     }
-
+    static public void ButtonsLightON(){
+        long timing = SystemClock.uptimeMillis();
+	mButtonsLight.setBrightness(buttonBrightness);
+	buttonNextTimeout = timing + mButtonTimeout;
+    }
     /**
      * Called when a user activity timeout has occurred.
      * Simply indicates that something about user activity has changed so that the new
-- 
2.1.1

