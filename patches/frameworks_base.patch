diff --git a/core/java/android/hardware/camera2/legacy/LegacyMetadataMapper.java b/core/java/android/hardware/camera2/legacy/LegacyMetadataMapper.java
index 8376e7c..a1decec 100644
--- a/core/java/android/hardware/camera2/legacy/LegacyMetadataMapper.java
+++ b/core/java/android/hardware/camera2/legacy/LegacyMetadataMapper.java
@@ -1040,7 +1040,7 @@ public class LegacyMetadataMapper {
                 return CONTROL_AE_ANTIBANDING_MODE_OFF;
             }
             case Camera.Parameters.ANTIBANDING_50HZ: {
-                return CONTROL_AE_ANTIBANDING_MODE_50HZ;
+                return /* CONTROL_AE_ANTIBANDING_MODE_50HZ */ CONTROL_AE_ANTIBANDING_MODE_AUTO;
             }
             case Camera.Parameters.ANTIBANDING_60HZ: {
                 return CONTROL_AE_ANTIBANDING_MODE_60HZ;
diff --git a/core/java/android/hardware/camera2/legacy/LegacyRequestMapper.java b/core/java/android/hardware/camera2/legacy/LegacyRequestMapper.java
index 61f7b8b..f370103 100644
--- a/core/java/android/hardware/camera2/legacy/LegacyRequestMapper.java
+++ b/core/java/android/hardware/camera2/legacy/LegacyRequestMapper.java
@@ -617,7 +617,7 @@ public class LegacyRequestMapper {
                 return Parameters.ANTIBANDING_60HZ;
             }
             case CONTROL_AE_ANTIBANDING_MODE_AUTO: {
-                return Parameters.ANTIBANDING_AUTO;
+                return Parameters.ANTIBANDING_50HZ /* Parameters.ANTIBANDING_AUTO */;
             }
             default: {
                 return null;
diff --git a/core/java/android/hardware/camera2/utils/CameraBinderDecorator.java b/core/java/android/hardware/camera2/utils/CameraBinderDecorator.java
index d461bca..a34a758 100644
--- a/core/java/android/hardware/camera2/utils/CameraBinderDecorator.java
+++ b/core/java/android/hardware/camera2/utils/CameraBinderDecorator.java
@@ -124,7 +124,7 @@ public class CameraBinderDecorator {
             case EUSERS:
                 throw new CameraRuntimeException(MAX_CAMERAS_IN_USE);
             case ENODEV:
-                throw new CameraRuntimeException(CAMERA_DISCONNECTED);
+                throw new CameraRuntimeException(/*CAMERA_DISCONNECTED*/ MAX_CAMERAS_IN_USE);
             case EOPNOTSUPP:
                 throw new CameraRuntimeException(CAMERA_DEPRECATED_HAL);
             case INVALID_OPERATION:
diff --git a/packages/SystemUI/src/com/android/systemui/statusbar/policy/MSimNetworkControllerImpl.java b/packages/SystemUI/src/com/android/systemui/statusbar/policy/MSimNetworkControllerImpl.java
index c346d62..24ae904 100644
--- a/packages/SystemUI/src/com/android/systemui/statusbar/policy/MSimNetworkControllerImpl.java
+++ b/packages/SystemUI/src/com/android/systemui/statusbar/policy/MSimNetworkControllerImpl.java
@@ -433,6 +433,19 @@ public class MSimNetworkControllerImpl extends NetworkControllerImpl {
                     updateDataIcon(i);
                     refreshViews(i);
                 }
+        } else if (action.equals(TelephonyIntents.ACTION_DEFAULT_DATA_SUBSCRIPTION_CHANGED)) {
+            // Update data in QS
+            long subId = intent.getLongExtra(PhoneConstants.SUBSCRIPTION_KEY, -1);
+
+            if (subId == -1) {
+                Slog.e(TAG, "No subId in ACTION_DEFAULT_DATA_SUBSCRIPTION_CHANGED");
+                return;
+            }
+
+            int phoneId = getPhoneId(subId);
+            updateTelephonySignalStrength(phoneId);
+            updateDataNetType(phoneId);
+            refreshViews(phoneId);
         }
     }
 
@@ -803,7 +816,7 @@ public class MSimNetworkControllerImpl extends NetworkControllerImpl {
                 mMSimContentDescriptionDataType[phoneId] =
                         TelephonyIcons.getDataTypeDesc();
                 mQSDataTypeIconId =
-                        TelephonyIcons.getQSDataTypeIcon();
+                        TelephonyIcons.getQSDataTypeIcon(dataSub);
             }
         }
 
diff --git a/packages/SystemUI/src/com/android/systemui/statusbar/policy/MobileDataController.java b/packages/SystemUI/src/com/android/systemui/statusbar/policy/MobileDataController.java
index 33d68bf..6a61f68 100644
--- a/packages/SystemUI/src/com/android/systemui/statusbar/policy/MobileDataController.java
+++ b/packages/SystemUI/src/com/android/systemui/statusbar/policy/MobileDataController.java
@@ -33,6 +33,7 @@ import android.net.NetworkStatsHistory;
 import android.net.NetworkTemplate;
 import android.os.RemoteException;
 import android.os.ServiceManager;
+import android.telephony.SubscriptionManager;
 import android.telephony.TelephonyManager;
 import android.text.format.DateUtils;
 import android.text.format.Time;
@@ -207,7 +208,7 @@ public class MobileDataController {
 
     private static String getActiveSubscriberId(Context context) {
         final TelephonyManager tele = TelephonyManager.from(context);
-        final String actualSubscriberId = tele.getSubscriberId();
+        final String actualSubscriberId = tele.getSubscriberId(SubscriptionManager.getDefaultDataSubId());
         return actualSubscriberId;
     }
 
diff --git a/packages/SystemUI/src/com/android/systemui/statusbar/policy/NetworkControllerImpl.java b/packages/SystemUI/src/com/android/systemui/statusbar/policy/NetworkControllerImpl.java
index 2122393..289d91c 100644
--- a/packages/SystemUI/src/com/android/systemui/statusbar/policy/NetworkControllerImpl.java
+++ b/packages/SystemUI/src/com/android/systemui/statusbar/policy/NetworkControllerImpl.java
@@ -256,6 +256,7 @@ public class NetworkControllerImpl extends BroadcastReceiver
         filter.addAction(Intent.ACTION_AIRPLANE_MODE_CHANGED);
 
         filter.addAction(TelephonyIntents.ACTION_SUBINFO_RECORD_UPDATED);
+        filter.addAction(TelephonyIntents.ACTION_DEFAULT_DATA_SUBSCRIPTION_CHANGED);
 
         mWimaxSupported = mContext.getResources().getBoolean(
                 com.android.internal.R.bool.config_wimaxEnabled);
diff --git a/services/core/java/com/android/server/power/PowerManagerService.java b/services/core/java/com/android/server/power/PowerManagerService.java
index 3cb2261..b320910 100644
--- a/services/core/java/com/android/server/power/PowerManagerService.java
+++ b/services/core/java/com/android/server/power/PowerManagerService.java
@@ -240,6 +240,7 @@ public final class PowerManagerService extends SystemService
     // Timestamp of the last call to user activity.
     private long mLastUserActivityTime;
     private long mLastUserActivityTimeNoChangeLights;
+    private long mLastButtonActivityTime;
 
     // Timestamp of last interactive power hint.
     private long mLastInteractivePowerHintTime;
@@ -1128,6 +1129,11 @@ public final class PowerManagerService extends SystemService
                     return true;
                 }
             } else {
+                if (eventTime > mLastButtonActivityTime && (event & PowerManager.USER_ACTIVITY_EVENT_BUTTON) != 0) {
+                    mLastButtonActivityTime = eventTime;
+                    mDirty |= DIRTY_USER_ACTIVITY;
+                }
+
                 if (eventTime > mLastUserActivityTime) {
                     mLastUserActivityTime = eventTime;
                     mDirty |= DIRTY_USER_ACTIVITY;
@@ -1628,7 +1634,7 @@ public final class PowerManagerService extends SystemService
                         }
 
                         mKeyboardLight.setBrightness(mKeyboardVisible ? keyboardBrightness : 0);
-                        if (mButtonTimeout != 0 && now > mLastUserActivityTime + mButtonTimeout) {
+                        if (mButtonTimeout != 0 && now > mLastButtonActivityTime + mButtonTimeout) {
                              mButtonsLight.setBrightness(0);
                         } else {
                             mButtonsLight.setBrightness(buttonBrightness);
diff --git a/telephony/java/android/telephony/TelephonyManager.java b/telephony/java/android/telephony/TelephonyManager.java
index 12b65f1..f3d81e0 100644
--- a/telephony/java/android/telephony/TelephonyManager.java
+++ b/telephony/java/android/telephony/TelephonyManager.java
@@ -2729,44 +2729,16 @@ public class TelephonyManager {
      * @hide
      */
     public static void setTelephonyProperty(String property, long subId, String value) {
-        String propVal = "";
-        String p[] = null;
-        String prop = SystemProperties.get(property);
         int phoneId = SubscriptionManager.getPhoneId(subId);
 
-        if (value == null) {
-            value = "";
-        }
-
-        if (prop != null) {
-            p = prop.split(",");
-        }
-
-        if (phoneId < 0) return;
-
-        for (int i = 0; i < phoneId; i++) {
-            String str = "";
-            if ((p != null) && (i < p.length)) {
-                str = p[i];
-            }
-            propVal = propVal + str + ",";
-        }
-
-        propVal = propVal + value;
-        if (p != null) {
-            for (int i = phoneId + 1; i < p.length; i++) {
-                propVal = propVal + "," + p[i];
-            }
-        }
-
-        // TODO: workaround for QC
-        if (property.length() > SystemProperties.PROP_NAME_MAX || propVal.length() > SystemProperties.PROP_VALUE_MAX) {
-            Rlog.d(TAG, "setTelephonyProperty length too long:" + property + ", " + propVal);
+        if (phoneId < 0) {
             return;
+        } else if (phoneId > 0) {
+            property += "_" + phoneId;
         }
 
-        Rlog.d(TAG, "setTelephonyProperty property=" + property + " propVal=" + propVal);
-        SystemProperties.set(property, propVal);
+        Rlog.d(TAG, "setTelephonyProperty property=" + property + " propVal=" + value);
+        SystemProperties.set(property, value);
     }
 
     /**
@@ -2857,16 +2829,16 @@ public class TelephonyManager {
      * @hide
      */
     public static String getTelephonyProperty(String property, long subId, String defaultVal) {
-        String propVal = null;
         int phoneId = SubscriptionManager.getPhoneId(subId);
-        String prop = SystemProperties.get(property);
-        if ((prop != null) && (prop.length() > 0)) {
-            String values[] = prop.split(",");
-            if ((phoneId >= 0) && (phoneId < values.length) && (values[phoneId] != null)) {
-                propVal = values[phoneId];
-            }
+
+        if (phoneId < 0) {
+            return defaultVal;
+        } else if (phoneId > 0) {
+            property += "_" + phoneId;
         }
-        return propVal == null ? defaultVal : propVal;
+
+        String propVal = SystemProperties.get(property);
+        return propVal.isEmpty() ? defaultVal : propVal;
     }
 
     /**
@@ -2875,15 +2847,14 @@ public class TelephonyManager {
      * @hide
      */
     public static int getTelephonyProperty(String property, int slotId, int defaultVal) {
-        String propVal = null;
-        String prop = SystemProperties.get(property);
-        if ((prop != null) && (prop.length() > 0)) {
-            String values[] = prop.split(",");
-            if ((slotId >= 0) && (slotId < values.length) && (values[slotId] != null)) {
-                propVal = values[slotId];
-            }
+        if (slotId < 0) {
+            return defaultVal;
+        } else if (slotId > 0) {
+            property += "_" + slotId;
         }
-        return propVal == null ? defaultVal : Integer.parseInt(propVal);
+
+        String propVal = SystemProperties.get(property);
+        return propVal.isEmpty() ? defaultVal : Integer.parseInt(propVal);
     }
 
     /** @hide */
@@ -3453,7 +3424,18 @@ public class TelephonyManager {
     /** @hide */
     @SystemApi
     public void setDataEnabled(boolean enable) {
-        setDataEnabledUsingSubId(getDefaultSubscription(), enable);
+        try {
+            AppOpsManager appOps = (AppOpsManager)mContext.getSystemService(Context.APP_OPS_SERVICE);
+            if (enable) {
+                if (appOps.noteOp(AppOpsManager.OP_DATA_CONNECT_CHANGE) != AppOpsManager.MODE_ALLOWED) {
+                    Log.w(TAG, "Permission denied by user.");
+                    return;
+                }
+            }
+            getITelephony().setDataEnabled(enable);
+        } catch (RemoteException e) {
+            Log.e(TAG, "Error calling setDataEnabled", e);
+        }
     }
 
     /** @hide */
